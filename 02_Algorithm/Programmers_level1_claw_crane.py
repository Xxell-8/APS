# 문제 출처: 프로그래머스(https://programmers.co.kr/learn/courses/30/lessons/64061)
'''
게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.

죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.

게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. 

각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 

모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 

게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 

집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 

만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 

크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. 

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 

크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

​
'''

def claw_crane(board, moves):
    # 1. 뽑은 인형을 담을 바구니(list) catch 생성
    catch = []
    # 2. 터트려져 사라진 인형의 개수를 셀 answer 변수 초기화
    answer = 0
    ### 각각의 칸은 board[i(행)][j(열)]로 접근 ###
    # 3. 크레인의 움직임(열)을 기준으로
    for j in moves:
        # 4. board의 각각 행을 순서대로 접근
        for i in range(len(board)):
            # 5-1. 접근한 칸에 인형이 있으면
            if board[i][j-1] != 0:
                # 5-2. catch에 인형을 append하고
                catch.append(board[i][j-1])
                # 5-3. 해당 칸을 비우기
                board[i][j-1] = 0
                # 6-1. 잡은 인형이 2개 이상이면
                if len(catch) >= 2:
                    # 6-2. 직전에 잡은 인형과 같은지 확인하고
                    ## 같다면, 2개의 인형 모두 터트리고 answer에 +2
                    if catch[-1] == catch[-2]:
                        del catch[-2:]
                        answer += 2
                # 7. 인형을 잡았으면 다음 크레인 움직임으로 넘어가기
                break
    return answer


claw_crane([[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]], [1,5,3,5,1,2,1,4])